"""
Django settings for profiles_project project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'op8@&m1chl+!0!z)h8eqascpy*+5iq7h@+)k+pq$@11bhic)e8'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG = bool(int(os.environ.get('DEBUG', 1)))
# What this does is it pulls in the value of the environment variable called debug we set this environment variable called debug we set this environment variable here in the supervisor file so you can see in the supervisor at the top of the configuration so in supervisor_profiles_api.conf we have kept DEBUG = 0. This sets the debug environment variable to zero when we run our application. So when we pull DEBUG then by default all environment variables are strings so there's no way to specify an integer as an environment variable, so we need to use this end function to convert our string of a one value or zero value to an integer and then we use the bool function to convert this to a boolean. The way python billions work is zero will convert into a false and a one will convert into a True, that's why we have 1 after DEBUG, because this is the default value. If the debug setting doesn't exist. 
# When we run our server on our local machine it's gonna be in debug mode, but then when it's running on our server debug mode is gonna be disabled.


# Next we are going to update the allowed hosts setting in our Django configuartion to fix Bad Request (400):
# Go to settings.py in our project. FInd ALLOWED_HOSTS = []
# ALLOWED_HOSTS allows us to enable access via specific domain names it;s a security feature to make sure that if somebody just finds a random IP address for our server they can't access the application unless they use a valid hostname so we need to specify the host names that we want to allow to connect to our server in the allowed hosts option
# The hostname we want to add is for our server which is easy for configuration
# On AWS DASHBOARD go to ec2, select our ec2 server, then if we see down Public DNS (IPv4), So copy that and then go to settings.py and paste it under eg:
ALLOWED_HOSTS = ['ec2-18-130-20-217.eu-west-2.compute.amazonaws.com', '127.0.0.1']
# ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'profiles_api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'profiles_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'profiles_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'


AUTH_USER_MODEL = 'profiles_api.UserProfile'  #configuring custom user model in django

STATIC_ROOT = 'static/'
